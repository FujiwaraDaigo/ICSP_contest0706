
  - TMBOでの解析に使ったメッシュの縦横数    
    18×32
  - プログラムの動かし方を書いた簡単な使い方説明
    最終的にクラスにまとめています．使い方の参考例としてはレポートのpdf，最後の分類器の評価部分をみてください．
    白線検出の際の白線の明度だけは，撮影環境によって異なると思うので手作業でフィッティングの必要があります．

    １クラスオブジェクトClassifyBallBound(movie #movieのパス,csv #TMBOcsvデータのパス)を作成してください．
    引数で指定したパスからデータを読み取ります．必要に応じて内部インスタンスを取得してください．

    ２メソッドextract_whiteline(threshold=240 #白線部分の明度(グレースケール),rate=30 #白線の誤差)を使い白線を読み取ります．
    白線の明度+-誤差の値をもつセルを抽出します．戻り値は2つで，
    白線以外の部分を黒塗りにした画像のnumpy配列(opencvで可視化可能)，セルに対応する要素が，白線より左を-1,白線上が１,白線より右が０とフラグづけされたnumpy配列
    です．

    ３メソッドexpect_bound(wrate=4 #状態Mのメッシュに対しての状態Lのメッシュの重み,filtrate=3 #活性化メッシュがこの数以下のときはボールと見なさない,buffere=1　#移動平均で前後いくつ取ってくるか)
    を使ってボールの重心の軌道補足と着地点の推定を行います．bufferを０にすると移動平均をオフにできます．場合によっては移動平均オフのほうが有効な場合もあります．
    戻り値は2つで，着地点のセルの座標の入ったnumpy配列(要素二個以上の場合もあり)と重心のセルの座標の入ったnumpy配列(行：タイムスケール　列：０列目がy座標１列目がx座標)

    ４メソッドjudge_where()によってばボールの着地点がどこなのか出力します，戻り値は，白線より左を-1,白線上が１,白線より右が０のint値です．

  - 動画ファイルの説明  (以下はボール位置判定での例. 撮影意図がわかるように)
    遠いアングルfar，中ぐらいのアングルmid，近いアングルnearからなります．続く数字は落ちた位置を示しており，-(マイナス)で始まるものは白線の左，1で始まるものは白線上，
    0で始まるものは白線の右に落ちたものです．
    様々なアングル，落下地点に対応できるように数種類撮影しました．

  - 参加してみての感想・コメント
    割と簡単に感じました．ただ二週間は授業の合間を塗ってやるには短かったので，もう少し時間的余裕があってもよかったかもしれません．自分としてはせっかくなので機械学習モデルを回してみたかったのですが，
    このデータ量では難しそうなので，次はもっと多くのデータを使える案件がいいなと個人的には思います．
    可読性と他の人でも使いやすいように気を使ったつもりです．